from fastapi import FastAPI, HTTPException
import joblib
import pandas as pd
import os

app = FastAPI()

# Dictionary to hold loaded models by ticker symbol
models = {}

# Load all models from the 'models' directory at API startup
@app.on_event("startup")
def load_models():
    model_dir = "models"
    for file in os.listdir(model_dir):
        if file.endswith(".joblib"):
            ticker = file.replace(".joblib", "")
            models[ticker] = joblib.load(os.path.join(model_dir, file))
    print(f"Loaded models: {list(models.keys())}")

# Example feature generator (you should replace with actual feature extraction logic)
def get_features_for_ticker(ticker: str) -> pd.DataFrame:
    # Dummy features for demo purposes; use real-time or historical data in practice
    return pd.DataFrame([[0.5, 0.7, 1.2]], columns=['feature1', 'feature2', 'feature3'])

# Prediction endpoint for a given stock ticker
@app.get("/predict/{ticker}")
def predict(ticker: str):
    ticker = ticker.upper()
    
    # Check if model exists for the given ticker
    if ticker not in models:
        raise HTTPException(status_code=404, detail="Model not found for this ticker.")
    
    model = models[ticker]
    
    # Get features to input to the model
    X = get_features_for_ticker(ticker)
    
    # Run prediction
    prediction = model.predict(X)[0]
    
    # Return the result
    return {
        "ticker": ticker,
        "prediction": prediction
    }
